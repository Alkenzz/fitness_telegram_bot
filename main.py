from aiogram import Dispatcher, Bot, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os

import Database.database as db
from Training import training
from IMB import feeding
import profile

from states import Training
import markups as mks

bot = Bot(token='6831818510:AAGkfAmMLyBzFq1NcVz8ejZ7Qt5RZRl1gP4')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

async def on_startup(_):
    await db.init_db()


@dp.message_handler(commands=['start'], state='*')
async def command_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username


    await db.create_profile(user_id, username)


    await Training.default.set()


    welcomeText = (f'üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n'
                   f'üèÜ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–∏ —Ç–≤–æ–∏—Ö —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª–µ–π! –°–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å:\n'
    f'üí™ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n'
    f'ü•ó –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n'
    f'‚ù§Ô∏è –û—Å–æ–∑–Ω–∞–Ω–Ω–æ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º')
    await bot.send_message(message.from_user.id, welcomeText, parse_mode = "HTML", reply_markup=mks.main_menu)


@dp.callback_query_handler(lambda c: c.data == 'main_menu', state='*')
async def main_menu(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.delete()
    await Training.default.set()
    await callback_query.message.answer("üìã–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:", reply_markup=mks.main_menu)


@dp.callback_query_handler(lambda c: c.data == 'trainings', state='*')
async def trainings_menu(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    path = os.getcwd()
    await training.init_trainings(dp, path)
    await callback_query.message.answer("üí™–í —Ä–∞–∑–¥–µ–ª–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ —Ç—ã –Ω–∞–π–¥–µ—à—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∞ —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.\n"
                                        "üëÄ –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –Ω–µ –≤–æ–ª–Ω—É–π—Å—è! –Ø –ø–æ–º–æ–≥—É –µ—ë —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å, —É—á–∏—Ç—ã–≤–∞—è —Ç–≤–æ–∏ —Ü–µ–ª–∏ –∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. üèãÔ∏è",
                                        reply_markup=mks.trainings_menu)




@dp.callback_query_handler(lambda c: c.data == 'feeding', state='*')
async def feeding_menu(callback_query: types.CallbackQuery):

    await callback_query.message.delete()

    await callback_query.message.answer("üçî –í —Ä–∞–∑–¥–µ–ª–µ —Å —Ä–∞—Ü–∏–æ–Ω–æ–º –ø–∏—Ç–∞–Ω–∏—è —Ç—ã —Å–º–æ–∂–µ—à—å –≤–∏–¥–µ—Ç—å —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é.\n"
                                        "‚úçÔ∏è –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é, –æ–±—Ä–∞—â–∞–π—Å—è –∫–æ –º–Ω–µ! –Ø —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —ç—Ç–∏–º. ü•ó",
                                        reply_markup=mks.feeding_menu)

    await feeding.get_height_weight(dp)


@dp.callback_query_handler(lambda c: c.data == 'profile', state='*')
async def profile_menu(callback_query: types.CallbackQuery):

    await callback_query.message.delete()

    await profile.profile(dp, callback_query)


if __name__ == '__main__':
    executor.start_polling(dp,
                           skip_updates=True,
                           on_startup=on_startup)
